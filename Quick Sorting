Q. Write a program to implement Quick sort.
Code:

public class QuickSort {
// Function to perform quicksort on an array
    static void quickSort(int arr[], int low, int high) {
        if (low < high) {
        // Partition the array and get the pivot index
            int pivotIndex = partition(arr, low, high);
            // Recursively sort the sub-arrays on both sides of the pivot
            quickSort(arr, low, pivotIndex - 1);
            quickSort(arr, pivotIndex + 1, high);
        }
    }
    // Function to partition the array and return the pivot index
    static int partition(int arr[], int low, int high) {
        // Choose the rightmost element as the pivot
        int pivot = arr[high];
        // Index of the smaller element
        int i = low - 1;
        // Traverse through the array
        for (int j = low; j< high; j++) {
            // If the current element is smaller than or equal to the pivot
            if (arr[j] <= pivot) {
                // Swap arr[i] and arr[j]
                i++;
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }
        // Swap arr[i+1] and arr[high] (pivot)
        int temp = arr[i + 1];
        arr[i + 1] = arr[high];

        arr[high] = temp;
        // Return the pivot index
        return i + 1;
    }
    // Function to print an array
    static void printArray(int arr[]) {
        int n = arr.length;
        for (int i = 0; i < n; ++i) {
            System.out.print(arr[i] + " ");
        }
        System.out.println();
    }
    public static void main(String args[]) {
        int arr[] = {64, 34, 25, 12, 22, 11, 90};
        int n = arr.length;
        System.out.println("Original array:");
        printArray(arr);
        // Perform quicksort
        quickSort(arr, 0, n - 1);
        System.out.println("Sorted array:");
        printArray(arr);
    }
}
